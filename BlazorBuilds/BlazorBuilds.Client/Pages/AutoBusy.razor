@inject EventAggregator _eventAggregator

@page "/autobusy"

@rendermode InteractiveAuto

<h3>AutoBusy</h3>

<div style="width:500px; height:500px; border:1px solid; display:flex;justify-content:center;align-items:center;position:relative;">
    <BusyIndicator IsLoading="@_isLoading" BusyText="@_busyText" ContentAlign="BusyIndicator.ContentPosition.Top" Direction="BusyIndicator.ContentDirection.Horizonal"
                   OverlayFixAt="@_overlayPosition" AriaLiveText="@_ariaLiveText" />

    Some form field or data table content would be in here.

</div>

<p>
    <button disabled="@_disabled" @onclick="async () => await OpenSpinner(BusyIndicator.OverlayPosition.Container)">Open Spinner Container</button>
    &nbsp;
    <button disabled="@_disabled" @onclick="async () => await OpenSpinner(BusyIndicator.OverlayPosition.Screen)">Open Spinner Screen</button>
</p>

<p>
    Additional button to use the global instance of the busy indicator on the routes component. See Z-index page for why this has been done.
</p>
<p>
    <b>Note:</b> Using the local instance of the busyindicator on all three pages Server, Wasm and Auto is perfectly fine when you do not have the global intances. Just comment out the global instances
     on the router page to verify this.
    
    Using the global Wasm instance on the Router page or Main Layout, as it instantly starts the download seems to effect Auto, as the auto pages seem to wait for the wasm files to download instead of
    using web sockets. This is odd as it all works fine without the wasm downlaod being started immediately as of the individual pages without the global wasm instance.
</p>
<p>
    Using Server and Wasm global instances together is fine if you do not need Auto as well, all three is fine if you do not need global. Individually Server, Wasm and Auto projects work as normal.
    <b>Note:</b> Given that using all three modes together and needing all three to have a global instnace due to Z-index problem is something I am not currently going to investigate further as its
    such and edge case it is something I doubt I will run into. If this is something you really need I can only advise to raise it as an issue with the Blazor team it may be a bug or an unsupported scenario.
</p>

<p>
    You probably will not need to do any of what is described on the Z-index page.
</p>
<button @onclick="async () => await OpenGlobalSpinner()">Open Global Spinner Screen</button>

@code {

    private BusyIndicator.OverlayPosition _overlayPosition = BusyIndicator.OverlayPosition.Container;

    private bool _isLoading = false;
    private string _busyText = ". . . Loading, please wait . . .";
    private string _ariaLiveText = String.Empty;
    private bool _disabled = true;



    private async Task OpenSpinner(BusyIndicator.OverlayPosition overlayPosition)
    {
        _overlayPosition = overlayPosition;
        _ariaLiveText = "loading local";
        _isLoading = true;
        await Task.Delay(2000);
        _isLoading = false;
        _ariaLiveText = "local finished";
    }

    private async Task OpenGlobalSpinner()
    {
        await _eventAggregator.Publish(new SetBusyIndicatorEvent("Client", true, _busyText, "Loading global"));
        await Task.Delay(2000);
        await _eventAggregator.Publish(new SetBusyIndicatorEvent("Client", false, "", "global finished"));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (true == firstRender)
        {
            _disabled = false;
            StateHasChanged();
        }
    }
}
